7.SQL查询语句确当要创建哪种类型的索引，如何优化查询？
·性能优化过程中，选择在哪个列上创建索引是最重要的步骤之一，可以考虑使用索引的主要有两种类型的列：WHERE子句出现的列，JOIN子句出现的列。
·考虑列中值的分布，索引的列的基数越大，索引的效果越好。
·使用短索引，如果对字符串列进行索引，应该指定一个前缀长度，可节省大量索引空间，提升查询速度。
·利用最左前缀，顾名思义，就是最左优先，在多列索引中有体现。即先看第一列，在第一列满足的条件下再看左边第二列，以此类推。
·不要过度建索引，只保持所需的索引。每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。
·修改表的内容时，索引必须进行更新，有时可能需要重构。因此，索引越多，所花时间越长。
·MySQL只对以下操作符使用索引：<、<=、=>、>=、between、in、以及某些时候的LIKE(不以通配符%或_开头)。

8.聚集索引和非聚集索引区别？
【根本区别】
表记录的排列顺序和与索引的排列顺序是否一致。
【聚集索引】
表记录的排列顺序和索引的排列顺序一致，所以查询效率快，只要找到第一个索引值记录，其余连续性的记录在物理也一样连续存放。
聚集索引对应的缺点是修改慢，为了保证表中记录的物理和索引顺序一致，在记录插入的时候，会对数据页重新排序。
(类似于字典中的拼音查询)
【非聚集索引】
制定了表中记录的逻辑结构，但是记录的物理和索引不一定一致，两种索引都采用B+树结构，非聚集索引的叶子层并不和实际数据页相重叠，
而采用叶子层包含一个指向表中的记录在数据页中的指针方式。非聚集索引层次多，不会造成数据重排。
(类似于字典中的部首查询)

9.有哪些锁(乐观锁悲观锁)，SELECT时怎么加排它锁？
【悲观锁(Pessimistic Lock)】
悲观锁的特点是先获取锁，再进行业务操作，即"悲观"的认为获取锁是非常有可能失败的，因此要先确保获取锁成功再进行业务操作。
通常所说的"一锁二查三更新"即指的是使用悲观锁。通常来说在数据库上的悲观锁需要数据库本身提供支持，即通过常用的的SETECT..FOR UPDATE操作来实现悲观锁。
当数据库执行SELECT FOR UPDATE时会获取被SELECT中的数据行的行锁，因此其他并发执行的SELECT FOR UPDATE如果试图选中同一行则会发生排斥(需要等待行锁被释放)，达到锁的效果。
SELECT FOR UPDATE获取的行锁会在当前事务结束时自动释放，因此必须在事务中使用。

需要注意的一点是，不同的数据库对SELECT FOR UPDATE的实现和支持都是有所区别的。
(MySQL中 SELECT FOR UPDATE 语句执行中所有扫描过的行都会被锁上，这一点很容易造成问题，因为如果在MySQL中用悲观锁务必要确定走了索引，而不是全表扫描)。

【乐观锁(Optimistic Lock)】
也叫乐观并发控制，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。
在提交数据更新前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，那么当前正在提交的事务会进行回滚。

乐观锁的特点是先进行业务操作，不到万不得一不去拿锁。即"乐观"认为拿锁多半是会成功的，因此在进行完业务操作需要实际更新数据的最后一步再去拿一下锁就好。
乐观锁在数据库上的实现完全是逻辑的，不需要数据库提供特殊的支持。一般的做法是在需要锁的数据上增加一个版本号，或者时间戳。
乐观锁在不发生取锁失败的情况下开销比悲观锁小，但一旦发生失败回滚开销则比较打，因此适合用在取锁失败概率比较小的场景，可以提升系统并发性能。
乐观锁还适合一些比较特殊的场景，例如在业务操作过程中无法和数据库保持连接等悲观锁无法适用的地方。

【总结】
悲观锁和乐观锁是数据库用来保证数据并发安全防止更新丢失的两种方法，例如在SELECT ... FOR UPDATE前加个事务就可以防止更新丢失。
悲观锁和乐观锁大部分场景下差异不大，一些独特场景下有一些差别，一般可以从如下几个方面判断：
·响应速度：如果需要非常高的响应速度，建议采用乐观锁方案，成功就执行，不成功就失败，不需要等待其他并发去释放锁。
·冲突频率：如果冲突频率非常高，建议采用悲观锁，保证成功率，如果冲突大，乐观锁会需要多次重试擦能成功，代价太大。
·重试代价：如果重试代价过大，建议使用悲观锁。

10.非关系型数据库和关系型数据库区别，优势比较？
【非关系型数据库的优势】
Ⅰ性能：NOSQL基于键值对，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，性能非常高。
Ⅱ可扩展性：同样也是基于键值对，数据之间没有耦合性，非常容易水平扩展。
【关系型数据库的优势】
Ⅰ复杂查询：可以用SQL语句方便地在一个表及多个表之间做非常复杂的数据查询。
Ⅱ事务支持：使得对于安全性很高的数据访问要求得以实现。
【总结】
对于这两类数据库，对方的优势就是自己的劣势，反之亦然。
NOSQL数据库慢慢开始具备SQL数据库的一些复杂查询功能，如MongoDB。
对于事务的支持也可以用一些系统级的原子操作来实现如乐观锁之类的方法来曲线救国，如Redis set nx。
