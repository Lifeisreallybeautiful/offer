11.数据库三范式？
【第一范式(确保每列保持原子性)】
第一范式是基本的范式，如果数据库中的所有字段值都是不可分离的原子值，就说明该数据库表满足了第一范式。
【第二范式(确保表中的每列都和主键相关)】
第二范式在第一范式的基础上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关(主要针对联合主键而言)。
也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据表中。
(比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单标号和商品编号作为数据库表的联合主键)
【第三范式(确保每列都和主键列直接相关，而不是间接相关)】
第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。
(比如在设计一个订单数据表的时候胡，可以将客户编号作为一个外键和订单表建立相应的关系。而不可以在订单表中添加关于客户其他信息，如名字、所属公司)。

12.数据库的读写分离、主从复制、主从复制分析的7个问题
【主从复制的几种方法】
-同步复制
所谓同步复制，意思是master的变化，必须等待slave-1，slave-2...slave-n完成后才能返回。
这样显然不可取，也不是MySQL复制的默认设置。例如，在web前端页面上，用户增加了条记录，需要等所有slave增加完后才能返回，需要等待极大的时间。
-异步复制
如同Ajax请求一样，master只需要完成自己的数据库操作即可。至于slave是否收到二进制文件，是否完成操作，不用关心，MySQL的默认设置。
-半同步复制
master只保证slaves中的一个操作成功，就返回。其他slave不管，这个功能是由Google为MySQL引入的。

【主从复制分析的7个问题】
问题1：master的写操作，slaves被动的进行一样的操作，保持数据一致性，那么slave是否可以主动的进行写操作？
-假设slave可以主动的进行写操作，slave又无法通知master，这样就导致了master和slave数据不一致了。
因此slave不应该进行写操作，至少是slave上涉及到复制的数据库不可以写。实际上，这里已经揭示了读写分离的概念。

问题2：主从复制中，可以有N个slave，可这些slave又不能进行写操作，要他们干嘛？
-实现数据备份。类似于高可用的功能，一旦master挂了，可以让slave顶上去，同时slave提升为master。
异地容灾，比如master在北京，地震挂了，那么在上海的slave还可以继续。
主要用于实现scale out，分担负载，可以将读的任务分散到slaves上。
(很可能的情况是，一个系统的读操作远远多于写操作，因此写操作发向master，读操作发向slaves进行操作)

问题3：主从复制中有master，slave1，slave2，...等等这么多的MySQL数据库，那比如一个Java web应用到底该连接哪个数据库？
-再应用中可以这样，INSERT/DELETE/UPDATE这些更新数据库的操作，用connection(for master)进行操作，SELECT用connection(for slaves)进行操作。
那么，我们的应用程序还要完成怎么从slaves选择一个来执行SELECT，可以使用一个简单的轮询算法。
这样的话，相当于应用程序完成了SQL语句的路由，而且与MySQL的主从复制架构非常关联。一旦master挂了，某些slave挂了，那么应用程序就需要修改了。
能不能让应用程序与MySQL的主从复制架构没有什么太多关系呢？
-找一个组件，application.program只需要与它打交道，用它来完成MySQL的代理，实现SQL语句路由。
MySQL proxy并不负责怎么从众多的slaves挑一个？可以交给另一个组件(比如哈proxy)来完成。

这就是所谓的MySQL READ WRITE SPLTTE，MySQL的读写分离。 

问题4：如果MySQL proxy，direct，master他们中的某些挂了怎么办？
-可以给这些关键的节点来个备份。

问题5：当master的二进制日志每产生一个时间，都需要发往slave，如果我们有N个slave，那是发N次，还是发1次？
-显然，应该发送N次。
实际上，在MySQL master内部，维护N个线程，每一个线程负责将二进制日志文件发往对应的slave。
master既要负责写操作，还要维护N个线程，负担会很重。
可以这样，slave-1是master的从，同时又是slave-2，slave-3....的主。
与此同时，slave-1不再负责SELECT操作，而是专程负责master的复制线程的负担，这就是所谓的多层复制的概念。

问题6：当一个SELECT发往MySQL proxy，可能这次由slave-2响应，下次由slave-3响应，这样就无法利用查询缓存了？
-找一个共享式缓存，比如memcache来解决。将slave-2，slave-3...这些查询结果都缓存至memcache中。

问题7：随着应用的日益增长，读操作很多，我们可以扩展slave，但是如果master满足不了写操作，怎么办？
-分库(垂直拆分)，分表(水平拆分)