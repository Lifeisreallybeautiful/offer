1.&和&&的区别
同：&和&&都可以用作逻辑与的运算符，表示逻辑与。即运算符两边的表达式都为true时，运算结果为true，否则结果为false。
异：&&有短路的功能，第一个表达式为false，则停止计算，不再计算第二个表达式。
	&可用作位运算符，当&两边的表达式不是boolean类型时，&表示按位与操作（通常用0x0f（1111）来与一个整数进行&运算，来获取该整数的最低4个bit位）。

2.char型变量存储中文
char型变量用来存储Unicode编码的字符，Unicode编码字符集中包含了汉字，所以char型变量可以存储汉字。
（Unicode编码占用两个字节，所以char类型的变量也是占用两个字节）

3.==和equals方法的区别
==用来比较两个变量的值是否相等，即用于比较变量所对应的内存中所存储的数值是否相等。比较两个基本类型的数据或者两个引用变量是否相等，只能用==。
equals放大用于比较两个独立对象的内容是否相同，它比较的两个对象是独立的。
（如果一个类没有定义equals方法，那么将继承Object类的equals方法，默认使用==，此时equals和==会得到相同结果）

4.静态变量和实例变量
语法上来说：
	静态变量前要加static，实例变量不加。
程序运行时来说：
	实例变量属于某个对象的属性，必须创建实例对象，其中的实例变量才会被分配空间，才能使用。
	静态变量属于类，也被称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，继而可以使用。
实例变量必须创建对象后通过对象进行使用，静态变量可以直接用类名来引用。

5.从一个static方法内部发出非static方法的调用
不可以调用。
static方法调用时不需要创建对象，而非static方法与对象关联，必须创建对象后才可以调用。

6.Integer和int的区别
int是Java提供的8种原始数据类型之一。（int short long double float char byte boolean）
Integer是Java提供的8种封装类之一（Integer Short Long Double Float Character Byte Boolean）
int默认值位0，而Integer默认值为null，即Integer可以区分出未赋值和值为0的区别，int无法表达出未赋值的情况。
在JSP开发中，Integer默认为null，所以用el表达式在文本框中显示时，值为空白字符串，而int默认值为0。所以用el表达式在文本框中显示时，结果为0，故int不适合作为web层的表单数据的类型。

7.作用域public，private，protected，以及不写时的区别
作用域 		当前类 同一package 子孙类 其他package
public			√		√		√		√
protected		√		√		√		×
不写（friendly）	√		√		×		×
private			√		×		×		×

8.Overload和Override的区别
重载Overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（参数的个数或类型不同）。
重写（覆盖）Override表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例调用方法将会调用子类的方法，相当于把父类的方法给覆盖掉了，这是多态性的一种表现。
需要注意的是 重写的方法只能比父类抛出更少的异常，重写方法的访问权限只能比父类的更大，如果父类的方法是private，那么子类不存在重写的限制，相当于是一个子类的新方法。

9.如何实现线程间的通讯
wait()、notify()、notifyAll()
wait():可以使调用该方法的线程释放共享资源的锁，然后从运行态退出，进入等待队列，直到被再次唤起。
notify():可以唤醒等待队列总第一个等待同意共享资源的线程，并使该线程退出等待队列，进入可运行态。
notifyAll():使所有正在等待队列中等待同一共享资源的线程从等待状态退出，进入可运行状态，此时优先级最高的线程最先执行。
利用这些方法，在需要的时候直接唤醒等待队列中的线程，而不用再循环检测共享资源的状态，不但节省了宝贵的CPU资源，也提高了程序大的效率。
＊wait()方法声明时会抛出InterruptedException异常，因此，需将它放入try...catch...中，并且使用时需把它放在一个同步代码块里，否则会出现如下异常java.lang.IllegalMonitorStateException: current thread not owner*

10.构造器Constructor能否被Override。
构造器Constructor不能被继承，因此不能被重写Override，但是可以被重载Overload

11.abstract class和interface的区别
abstract类不能创建实例对象，含有abstract方法的类必须定义为抽象类，抽象类中的方法不必是抽象方法。
abstract类中定义的抽象方法必须在具体子类中实现，所以不能有抽象构造方法或抽象静态方法。如果子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。

接口(interface)可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。

二者语法区别：
①抽象类可以有构造方法，接口中不能有构造方法。
②抽象类中可以有普通成员变量，接口中没有普通成员变量。
③抽象类中可以包含非抽象的普通方法，接口中的所有方法必须是抽象的，不能有非抽象的普通方法。
④抽象类中的抽象方法的访问类型可以是public，protected，但接口中的抽象方法只能是public类型的，并且默认为public abstract类型。
⑤抽象类中可以包含静态方法，接口中不能包含静态方法。
